/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
eval("const body = document.querySelector('body');\r\nconst weatherLeft = document.querySelector(\".weather-left\");\r\nconst weatherRigth = document.querySelector('.weather-rigth');\r\nconst cityName = document.querySelector('.city');\r\nconst currentTemp = document.querySelector('.current-temperature');\r\nconst scale = document.querySelectorAll('.scale');\r\nconst maxTemp = document.querySelector('.max-temp');\r\nconst minTemp = document.querySelector('.min-temp');\r\nconst humidity = document.querySelector('.humidity');\r\nconst windSpeed = document.querySelector('.wind-speed');\r\nconst cityNameInput = document.querySelector('.city-search-input');\r\nconst citySubmit = document.querySelector('.city-search-btn');\r\nconst toggleSelector = document.querySelector('.slider');\r\nconst toggleInput = document.querySelector('.toggle-input');\r\nconst weatherIcon = document.querySelector('.weather-icon');\r\n\r\nconst renderError = (error) => {\r\n  let errorDisplay = document.createElement(\"div\");\r\n  errorDisplay.className = \"error-display\";\r\n  errorDisplay.textContent = \"ERROR: City was not found. Try again.\";\r\n  body.appendChild(errorDisplay);\r\n};\r\n\r\nconst toggleScale = () => {\r\n  if (toggleInput.checked === true) {\r\n    currentTemp.textContent = cToKelvin(currentTemp.textContent);\r\n    maxTemp.textContent = cToKelvin(maxTemp.textContent);\r\n    minTemp.textContent = cToKelvin(minTemp.textContent);\r\n    scale.forEach((el) => (el.textContent = \" 째K\"));\r\n  } else {\r\n    currentTemp.textContent = kToCelsius(currentTemp.textContent);\r\n    maxTemp.textContent = kToCelsius(maxTemp.textContent);\r\n    minTemp.textContent = kToCelsius(minTemp.textContent);\r\n    scale.forEach((el) => (el.textContent = \" 째C\"));\r\n  }\r\n}\r\n\r\nconst kToCelsius = (kTemp) => {\r\n  return (parseFloat(kTemp) - 273.15).toFixed(2);\r\n}\r\n\r\nconst cToKelvin = (cTemp) => {\r\n  return (parseFloat(cTemp) + 273.15).toFixed(2);\r\n};\r\n\r\nconst renderWeather = (object) => {\r\n  if (document.querySelector('.error-display')) { body.removeChild(document.querySelector(\".error-display\")) };\r\n  \r\n  cityName.textContent = object.name + \", \" + object.sys.country;\r\n  \r\n  if (toggleInput.checked === true) {\r\n    currentTemp.textContent = kToCelsius(object.main.temp);\r\n    maxTemp.textContent = kToCelsius(object.main.temp_max);\r\n    minTemp.textContent = kToCelsius(object.main.temp_min);\r\n    scale.forEach((el) => (el.textContent = \" 째C\"));\r\n  } else {\r\n    currentTemp.textContent = object.main.temp;\r\n    maxTemp.textContent = object.main.temp_max;\r\n    minTemp.textContent = object.main.temp_min;\r\n    scale.forEach((el) => (el.textContent = \" 째K\"));\r\n  }\r\n\r\n  humidity.textContent = object.main.humidity;\r\n  windSpeed.textContent = object.wind.speed;\r\n\r\n  console.log(object);\r\n  \r\n  if (object.weather[0].description === \"light rain\") {\r\n    weatherIcon.textContent = \"f\";\r\n  } else if (object.weather[0].description === \"scattered clouds\") {\r\n    weatherIcon.textContent = \"3\";\r\n  } else if (object.weather[0].description === \"clear sky\") {\r\n    weatherIcon.textContent = \"1\";\r\n  } else if (object.weather[0].description === \"few clouds\") {\r\n    weatherIcon.textContent = \"a\";\r\n  } else if (object.weather[0].description === \"moderate rain\") {\r\n    weatherIcon.textContent = \"i\";\r\n  } else if (object.weather[0].description === \"heavy intensity rain\") {\r\n    weatherIcon.textContent = \"u\";\r\n  } else {\r\n    weatherIcon.textContent = \"p\";\r\n  }\r\n};\r\n\r\nconst getWeather = (latVar, longVar) => {\r\n  fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?lat=${latVar}&lon=${longVar}&appid=0fdbd7f50c09d58a24d8cb3dd3d4e36d`,\r\n    { mode: \"cors\" }\r\n  )\r\n    .then((result) => result.json())\r\n    .then((object) => renderWeather(object))\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nconst getLocation = () => {\r\n  if (navigator.geolocation) {\r\n    position = navigator.geolocation.getCurrentPosition(\r\n      successFunction,\r\n      errorFunction\r\n    );\r\n  }\r\n\r\n  function successFunction(position) {\r\n    var lat = position.coords.latitude;\r\n    var long = position.coords.longitude;\r\n    getWeather(lat, long);\r\n  }\r\n  function errorFunction(error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nconst loadCityData = () => {\r\n  fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${cityNameInput.value}&appid=0fdbd7f50c09d58a24d8cb3dd3d4e36d`,\r\n    { mode: \"cors\" }\r\n  )\r\n    .then((result) => result.json())\r\n    .then((object) => renderWeather(object))\r\n    .catch((error) => renderError(error));\r\n}\r\n\r\n\r\ncitySubmit.addEventListener('click', loadCityData);\r\n\r\nlet timeout = null;\r\ncityNameInput.addEventListener(\"keyup\", function(event) {\r\n  clearTimeout(timeout);\r\n   timeout = setTimeout(function () {\r\n    citySubmit.click();\r\n   }, 1000);\r\n});\r\n\r\ntoggleSelector.addEventListener(\"click\", toggleScale);\r\n\r\ngetLocation();\n\n//# sourceURL=webpack://weather-app-js/./src/app.js?");
/******/ })()
;